# Задача 34:  Винни-Пух попросил Вас посмотреть, есть ли в его стихах ритм. 
# Поскольку разобраться в его кричалках не настолько просто, насколько легко 
# он их придумывает, Вам стоит написать программу. Винни-Пух считает, что 
# ритм есть, если число слогов (т.е. число гласных букв) в каждой фразе 
# стихотворения одинаковое. Фраза может состоять из одного слова, если 
# во фразе несколько слов, то они разделяются дефисами. Фразы отделяются 
# друг от друга пробелами. Стихотворение  Винни-Пух вбивает в программу с 
# клавиатуры. В ответе напишите “Парам пам-пам”, если с ритмом все в порядке 
# и “Пам парам”, если с ритмом все не в порядке
# *Пример:*
# **Ввод:** пара-ра-рам рам-пам-папам па-ра-па-да    
# **Вывод:** Парам пам-пам  

def canYouFeelTheRythm(chant):
    syllableCount = 0
    vowels = "аяоёэеыиую"
    chant = chant.lower()
    phrases = {item:0 for item in chant.split()}
    for key in phrases:
        for letter in key:
            if letter in vowels:
                phrases[key] += 1
        maxCount = phrases[key]
    if len(set(phrases.values())) == 1:
        return "Парам пам-пам! С ритмом ВСЁ В ПОРЯДКЕ ^.^"
    else:
        return "Пам парам ... с ритмом всё НЕ в порядке >.<"


print("========= КРиЧаЛКи ВИННИ ПУХА =========")
print("Ритм есть, если число слогов в каждой фразе стихотворения одинаковое.")
print("Проверим кричалку на ритм...")

chant1 = "пАра-ра-рАм Рам-пам-пАпам па-ра-пА-ДА"
chant2 = "пуМ пу-Рум пУ-руМ пу-рУм пу-рУм пУм-пУм"
chant3 = "тРям-парям таДАм-Пам туРУ-рУм"
chant4 = "руМ-пидУм тратАм-тАм таМ-таРАм трЯм-брЮм"

print(chant1)
print(canYouFeelTheRythm(chant1))
print()
print(chant2)
print(canYouFeelTheRythm(chant2))
print()
print(chant3)
print(canYouFeelTheRythm(chant3))
print()
print(chant4)
print(canYouFeelTheRythm(chant4))
print()

# ========= КРиЧаЛКи ВИННИ ПУХА =========
# Ритм есть, если число слогов в каждой фразе стихотворения одинаковое.
# Проверим кричалку на ритм...
# пАра-ра-рАм Рам-пам-пАпам па-ра-пА-ДА
# Парам пам-пам! С ритмом ВСЁ В ПОРЯДКЕ ^.^

# пуМ пу-Рум пУ-руМ пу-рУм пу-рУм пУм-пУм
# Пам парам ... с ритмом всё НЕ в порядке >.<

# тРям-парям таДАм-Пам туРУ-рУм
# Парам пам-пам! С ритмом ВСЁ В ПОРЯДКЕ ^.^

# руМ-пидУм тратАм-тАм таМ-таРАм трЯм-брЮм
# Пам парам ... с ритмом всё НЕ в порядке >.<

# рум-пидум тратам-там там-тарам трям-брюм
# Пам парам ... с ритмом всё НЕ в порядке >.<


# Задача 36: Напишите функцию print_operation_table(operation, num_rows=6, num_columns=6), 
# которая принимает в качестве аргумента функцию, вычисляющую элемент по номеру строки 
# и столбца. Аргументы num_rows и num_columns указывают число строк и столбцов таблицы, 
# которые должны быть распечатаны. Нумерация строк и столбцов идет с единицы (подумайте, 
# почему не с нуля). 
# Примечание: бинарной операцией называется любая операция, у которой 
# ровно два аргумента, как, например, у операции умножения.

# *Пример:*
# **Ввод:** `print_operation_table(lambda x, y: x * y) ` 
# **Вывод:**
# 1   2   3   4   5   6
# 2   4   6   8   10  12
# 3   6   9   12  15  18
# 4   8   12  16  20  24
# 5   10  15  20  25  30
# 6   12  18  24  30  36

def print_operation_table(operation, num_rows=6, num_columns=9):
    for i in range(1, num_rows + 1):
        print(f"{i}\t", end='') # выводим номер строки
        for j in range(2, num_columns + 1):
            if i == 1:
                print(f"{j}\t", end='') # выводим номер столбца
            else:
                print(f"{operation(i, j)}\t", end='')
        print()


print("\n=========== ТАБЛИЦА СЛОЖЕНИЯ: ")
print_operation_table(lambda x, y: x + y)
print("\n=========== ТАБЛИЦА УМНОЖЕНИЯ: ")
print_operation_table(lambda x, y: x * y)
print("\n=========== ТАБЛИЦА СТЕПЕНЕЙ: ")
print_operation_table(lambda x, y: x ** y)

# =========== ТАБЛИЦА СЛОЖЕНИЯ:
# 1       2       3       4       5       6       7       8       9
# 2       4       5       6       7       8       9       10      11
# 3       5       6       7       8       9       10      11      12
# 4       6       7       8       9       10      11      12      13
# 5       7       8       9       10      11      12      13      14
# 6       8       9       10      11      12      13      14      15

# =========== ТАБЛИЦА УМНОЖЕНИЯ:
# 1       2       3       4       5       6       7       8       9
# 2       4       6       8       10      12      14      16      18
# 3       6       9       12      15      18      21      24      27
# 4       8       12      16      20      24      28      32      36
# 5       10      15      20      25      30      35      40      45
# 6       12      18      24      30      36      42      48      54

# =========== ТАБЛИЦА СТЕПЕНЕЙ:
# 1       2       3       4       5       6       7       8       9
# 2       4       8       16      32      64      128     256     512
# 3       9       27      81      243     729     2187    6561    19683
# 4       16      64      256     1024    4096    16384   65536   262144
# 5       25      125     625     3125    15625   78125   390625  1953125
# 6       36      216     1296    7776    46656   279936  1679616 10077696